-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Prefetch packages
--   
--   Prefetch packages
@package nvfetcher
@version 0.1.0.0

module NvFetcher.Types

-- | Package version
newtype Version
Version :: Text -> Version

-- | SHA 256 sum
newtype SHA256
SHA256 :: Text -> SHA256

-- | The input of nvchecker
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[owner] :: VersionSource -> Text
[repo] :: VersionSource -> Text
Git :: Text -> VersionSource
[vurl] :: VersionSource -> Text
Pypi :: Text -> VersionSource
[pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[repology] :: VersionSource -> Text
[repo] :: VersionSource -> Text

-- | The result of running nvchecker
data NvcheckerResult
NvcheckerResult :: Version -> Maybe Version -> NvcheckerResult
[nvNow] :: NvcheckerResult -> Version

-- | nvchecker doesn't give this value, but shake restores it from last run
[nvOld] :: NvcheckerResult -> Maybe Version

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: Prefetch)
FetchGit :: Text -> Version -> Maybe Text -> Bool -> Bool -> Bool -> PrefetchResult k -> NixFetcher (k :: Prefetch)
[furl] :: NixFetcher (k :: Prefetch) -> Text
[rev] :: NixFetcher (k :: Prefetch) -> Version
[branch] :: NixFetcher (k :: Prefetch) -> Maybe Text
[deepClone] :: NixFetcher (k :: Prefetch) -> Bool
[fetchSubmodules] :: NixFetcher (k :: Prefetch) -> Bool
[leaveDotGit] :: NixFetcher (k :: Prefetch) -> Bool
[sha256] :: NixFetcher (k :: Prefetch) -> PrefetchResult k
FetchUrl :: Text -> PrefetchResult k -> NixFetcher (k :: Prefetch)
[furl] :: NixFetcher (k :: Prefetch) -> Text
[sha256] :: NixFetcher (k :: Prefetch) -> PrefetchResult k

-- | Prefetch status
data Prefetch
Fresh :: Prefetch
Prefetched :: Prefetch

-- | Package name, used in generating nix expr
type PackageName = Text

-- | How to create package source fetcher given a version
type PackageFetcher = Version -> NixFetcher Fresh

-- | A package is defined with its name, how to track its version, and how
--   to fetch it as we have version
data Package
Package :: PackageName -> VersionSource -> PackageFetcher -> Package
[pname] :: Package -> PackageName
[pversion] :: Package -> VersionSource
[pfetcher] :: Package -> PackageFetcher
instance Control.DeepSeq.NFData NvFetcher.Types.Version
instance Data.Binary.Class.Binary NvFetcher.Types.Version
instance Data.Hashable.Class.Hashable NvFetcher.Types.Version
instance GHC.Generics.Generic NvFetcher.Types.Version
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.Version
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.Version
instance GHC.Base.Monoid NvFetcher.Types.Version
instance GHC.Base.Semigroup NvFetcher.Types.Version
instance Data.String.IsString NvFetcher.Types.Version
instance GHC.Classes.Ord NvFetcher.Types.Version
instance GHC.Show.Show NvFetcher.Types.Version
instance GHC.Classes.Eq NvFetcher.Types.Version
instance Control.DeepSeq.NFData NvFetcher.Types.SHA256
instance Data.Binary.Class.Binary NvFetcher.Types.SHA256
instance Data.Hashable.Class.Hashable NvFetcher.Types.SHA256
instance GHC.Generics.Generic NvFetcher.Types.SHA256
instance GHC.Classes.Eq NvFetcher.Types.SHA256
instance GHC.Show.Show NvFetcher.Types.SHA256
instance Control.DeepSeq.NFData NvFetcher.Types.VersionSource
instance Data.Binary.Class.Binary NvFetcher.Types.VersionSource
instance Data.Hashable.Class.Hashable NvFetcher.Types.VersionSource
instance GHC.Generics.Generic NvFetcher.Types.VersionSource
instance GHC.Classes.Eq NvFetcher.Types.VersionSource
instance GHC.Show.Show NvFetcher.Types.VersionSource
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerResult
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerResult
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerResult
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerResult
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerResult
instance GHC.Show.Show NvFetcher.Types.NvcheckerResult
instance GHC.Generics.Generic (NvFetcher.Types.NixFetcher k)
instance GHC.Show.Show (NvFetcher.Types.PrefetchResult k) => GHC.Show.Show (NvFetcher.Types.NixFetcher k)
instance GHC.Classes.Eq (NvFetcher.Types.PrefetchResult k) => GHC.Classes.Eq (NvFetcher.Types.NixFetcher k)
instance Data.Hashable.Class.Hashable (NvFetcher.Types.PrefetchResult k) => Data.Hashable.Class.Hashable (NvFetcher.Types.NixFetcher k)
instance Data.Binary.Class.Binary (NvFetcher.Types.PrefetchResult k) => Data.Binary.Class.Binary (NvFetcher.Types.NixFetcher k)
instance Control.DeepSeq.NFData (NvFetcher.Types.PrefetchResult k) => Control.DeepSeq.NFData (NvFetcher.Types.NixFetcher k)
instance GHC.Show.Show NvFetcher.Types.Package
instance GHC.Classes.Eq NvFetcher.Types.Package
instance GHC.Classes.Ord NvFetcher.Types.Package
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.NvcheckerResult

module NvFetcher.Nvchecker

-- | The input of nvchecker
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[owner] :: VersionSource -> Text
[repo] :: VersionSource -> Text
Git :: Text -> VersionSource
[vurl] :: VersionSource -> Text
Pypi :: Text -> VersionSource
[pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[repology] :: VersionSource -> Text
[repo] :: VersionSource -> Text

-- | The result of running nvchecker
data NvcheckerResult
NvcheckerResult :: Version -> Maybe Version -> NvcheckerResult
[nvNow] :: NvcheckerResult -> Version

-- | nvchecker doesn't give this value, but shake restores it from last run
[nvOld] :: NvcheckerResult -> Maybe Version

-- | Rules of nvchecker
nvcheckerRule :: Rules ()

-- | Run nvchecker
checkVersion :: VersionSource -> Action NvcheckerResult

module NvFetcher.NixFetcher

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: Prefetch)
FetchGit :: Text -> Version -> Maybe Text -> Bool -> Bool -> Bool -> PrefetchResult k -> NixFetcher (k :: Prefetch)
[furl] :: NixFetcher (k :: Prefetch) -> Text
[rev] :: NixFetcher (k :: Prefetch) -> Version
[branch] :: NixFetcher (k :: Prefetch) -> Maybe Text
[deepClone] :: NixFetcher (k :: Prefetch) -> Bool
[fetchSubmodules] :: NixFetcher (k :: Prefetch) -> Bool
[leaveDotGit] :: NixFetcher (k :: Prefetch) -> Bool
[sha256] :: NixFetcher (k :: Prefetch) -> PrefetchResult k
FetchUrl :: Text -> PrefetchResult k -> NixFetcher (k :: Prefetch)
[furl] :: NixFetcher (k :: Prefetch) -> Text
[sha256] :: NixFetcher (k :: Prefetch) -> PrefetchResult k

-- | Prefetch status
data Prefetch
Fresh :: Prefetch
Prefetched :: Prefetch

-- | Types can be converted into nix expr
class ToNixExpr a
toNixExpr :: ToNixExpr a => a -> Text

-- | Rules of nix fetcher
prefetchRule :: Rules ()

-- | Run nix fetcher
prefetch :: NixFetcher Fresh -> Action (NixFetcher Prefetched)

-- | Create a fetcher from github repo
gitHubFetcher :: (Text, Text) -> PackageFetcher

-- | Create a fetcher from pypi
pypiFetcher :: Text -> PackageFetcher

-- | Create a fetcher from github release
gitHubReleaseFetcher :: (Text, Text) -> Text -> PackageFetcher

-- | Create a fetcher from git url
gitFetcher :: Text -> PackageFetcher

-- | Create a fetcher from url
urlFetcher :: Text -> NixFetcher Fresh
instance NvFetcher.NixFetcher.ToNixExpr (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Fresh)
instance NvFetcher.NixFetcher.ToNixExpr (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Prefetched)
instance NvFetcher.NixFetcher.ToNixExpr GHC.Types.Bool
instance NvFetcher.NixFetcher.ToNixExpr NvFetcher.Types.Version

module NvFetcher.PackageSet

-- | Package set is a free monad equipped with two capabilities:
--   
--   <ol>
--   <li>Carry defined packages</li>
--   <li>Run shake actions</li>
--   </ol>
--   
--   Consturct it using <a>newPackage</a> and <a>embedAction</a>
type PackageSet = Free PackageSetF

-- | Add a package to package set
newPackage :: PackageName -> VersionSource -> PackageFetcher -> PackageSet ()

-- | Lift a shake <a>Action</a> to package set
embedAction :: Action a -> PackageSet a

-- | Add a list of packages into package set
purePackageSet :: [Package] -> PackageSet ()

-- | Run package set into a set of packages, carried by <a>Action</a>
runPackageSet :: PackageSet () -> Action (Set Package)

-- | A tagless final style DSL for constructing packages
class PkgDSL f
new :: PkgDSL f => f PackageName -> f (Prod '[PackageName])
andThen :: PkgDSL f => f (Prod r) -> f a -> f (Prod (a : r))
end :: (PkgDSL f, Member PackageName r, Member VersionSource r, Member PackageFetcher r) => f (Prod r) -> f ()
define :: (Member PackageName r, Member VersionSource r, Member PackageFetcher r) => PackageSet (Prod r) -> PackageSet ()

-- | Start chaining with the name of package to define
package :: PackageName -> PackageSet (Prod '[PackageName])

-- | Attach version sources
src :: PackageSet (Prod r) -> VersionSource -> PackageSet (Prod (VersionSource : r))

-- | Attach fetchers
fetch :: PackageSet (Prod r) -> PackageFetcher -> PackageSet (Prod (PackageFetcher : r))

-- | A synonym of <a>fetchGitHub</a> and <a>sourceGitHub</a>
fromGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | A synonym of <a>fetchPypi</a> and <a>sourcePypi</a>
fromPypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | This package follows the latest github release
sourceGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (VersionSource : r))

-- | This package follows the latest git commit
sourceGit :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the latest pypi release
sourcePypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of an Aur package
sourceAur :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of an Arch Linux package
sourceArchLinux :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows a pinned version
sourceManual :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of a repology package
sourceRepology :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (VersionSource : r))

-- | This package is fetched from a github repo
fetchGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from a file in github release
fetchGitHubRelease :: PackageSet (Prod r) -> (Text, Text, Text) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from pypi
fetchPypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from git
fetchGit :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from url
fetchUrl :: PackageSet (Prod r) -> (Version -> Text) -> PackageSet (Prod (PackageFetcher : r))

-- | Simple HList
data Prod (r :: [Type])
[Nil] :: Prod '[]
[Cons] :: !x -> Prod xs -> Prod (x : xs)

-- | Project elements from <a>Prod</a>
class Member (a :: Type) (r :: [Type])
proj :: Member a r => Prod r -> a

-- | Constraint for producing error messages
type family NotElem (x :: Type) (xs :: [Type]) :: Constraint
instance NvFetcher.PackageSet.PkgDSL NvFetcher.PackageSet.PackageSet
instance NvFetcher.PackageSet.NotElem x xs => NvFetcher.PackageSet.Member x (x : xs)
instance NvFetcher.PackageSet.Member x xs => NvFetcher.PackageSet.Member x (_y : xs)
instance (TypeError ...) => NvFetcher.PackageSet.Member x '[]
instance GHC.Base.Functor NvFetcher.PackageSet.PackageSetF

module NvFetcher

-- | Rules of nvfetcher
nvfetcherRules :: Rules ()

-- | Main action, given a set of packages, generating nix sources expr in a
--   file
generateNixSources :: FilePath -> [Package] -> Action ()

-- | Arguments for running nvfetcher
data Args
Args :: (ShakeOptions -> ShakeOptions) -> FilePath -> Rules () -> Action () -> Args
[argShakeOptions] :: Args -> ShakeOptions -> ShakeOptions
[argOutputFilePath] :: Args -> FilePath
[argRules] :: Args -> Rules ()
[argActionAfterBuild] :: Args -> Action ()

-- | Default arguments of <a>defaultMain</a>
defaultArgs :: Args

-- | Entry point of nvfetcher
defaultMain :: Args -> PackageSet () -> IO ()

-- | Like <a>defaultMain</a> but allows to define custom cli flags
defaultMainWith :: [OptDescr (Either String a)] -> ([a] -> IO (Args, PackageSet ())) -> IO ()

-- | Record version changes between runs, relying on shake database
data VersionChange
VersionChange :: PackageName -> Maybe Version -> Version -> VersionChange
[vcName] :: VersionChange -> PackageName
[vcOld] :: VersionChange -> Maybe Version
[vcNew] :: VersionChange -> Version

-- | Get version changes. Use this function in <a>argActionAfterBuild</a>
--   to produce external changelog
getVersionChanges :: Action [VersionChange]
instance GHC.Classes.Eq NvFetcher.VersionChange
instance GHC.Show.Show NvFetcher.VersionChange
