{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE ViewPatterns #-}

module Development.NvFetcher
  ( module Development.NvFetcher.NixFetcher,
    module Development.NvFetcher.Nvchecker,
    module Development.NvFetcher.PackageSet,
    module Development.NvFetcher.Types,
    nvfetcherRules,
    Args (..),
    defaultArgs,
    defaultMain,
  )
where

import Data.Coerce (coerce)
import qualified Data.Set as Set
import qualified Data.Text as T
import Development.NvFetcher.NixFetcher
import Development.NvFetcher.Nvchecker
import Development.NvFetcher.PackageSet
import Development.NvFetcher.Types
import Development.Shake
import NeatInterpolation (trimming)

--------------------------------------------------------------------------------

data Args = Args
  { argShakeOptions :: ShakeOptions,
    argOutputFilePath :: FilePath,
    argRules :: Rules ()
  }

defaultArgs :: Args
defaultArgs = Args shakeOptions "sources.nix" $ pure ()

defaultMain :: Args -> PackageSet () -> IO ()
defaultMain Args {..} pkgSet =
  shakeArgs argShakeOptions {shakeFiles = "_make", shakeProgress = progressSimple} $ do
    phony "clean" $ removeFilesAfter "_make" ["//*"] >> removeFilesAfter "." [argOutputFilePath]
    argRules
    nvfetcherRules
    action $ do
      pkgs <- runPackageSet pkgSet
      generateNixSources argOutputFilePath $ Set.toList pkgs

--------------------------------------------------------------------------------

nvfetcherRules :: Rules ()
nvfetcherRules = do
  nvcheckerRule
  prefetchRule

generateNixSources :: FilePath -> [Package] -> Action ()
generateNixSources fp pkgs = do
  body <- genBody
  writeFileChanged fp $ T.unpack $ srouces $ T.unlines body
  where
    single Package {..} = do
      version <- askVersion pversion
      prefetched <- prefetch $ pfetcher version
      pure (pname, version, prefetched)
    genOne (name, coerce @Version -> ver, toNixExpr -> srcP) =
      [trimming|
        $name = {
          pname = "$name";
          version = "$ver";
          src = $srcP;
        };
      |]
    genBody = parallel $ map (fmap genOne . single) pkgs
    srouces body =
      [trimming|
        # This file was generated by nvfetcher, please do not modify it manually.
        { fetchFromGitHub, fetchurl }:
        {
          $body
        }
      |]
